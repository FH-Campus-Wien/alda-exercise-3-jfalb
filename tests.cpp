// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "lib/catch.hpp"
#include "sudoku.hpp"
#include <string.h>


// =====================
// Sudoku Testcases
// ---------------------

TEST_CASE("Test1", "Sudoku")
{
    int result = 0;
    int actual[SIZE][SIZE];
    int initial[SIZE][SIZE] = {
        {0, 1, 0, 0, 0, 9, 0, 5, 0},
        {0, 9, 0, 0, 0, 0, 4, 8, 0},
        {0, 6, 0, 1, 0, 4, 0, 0, 0},
        {0, 0, 5, 0, 0, 0, 9, 3, 0},
        {0, 0, 0, 7, 0, 2, 0, 0, 0},
        {0, 2, 1, 0, 0, 0, 8, 0, 0},
        {4, 0, 0, 0, 8, 0, 6, 0, 9},
        {0, 0, 0, 0, 6, 0, 5, 0, 3},
        {2, 0, 0, 0, 3, 0, 0, 0, 0},
    };
    int expected[SIZE][SIZE] = {
        {3, 1, 4, 8, 2, 9, 7, 5, 0},
        {0, 9, 0, 0, 0, 0, 4, 8, 0},
        {0, 6, 0, 1, 0, 4, 0, 0, 0},
        {0, 0, 5, 0, 0, 0, 9, 3, 0},
        {0, 0, 0, 7, 0, 2, 0, 0, 0},
        {0, 2, 1, 0, 0, 0, 8, 0, 0},
        {4, 0, 0, 0, 8, 0, 6, 0, 9},
        {0, 0, 0, 0, 6, 0, 5, 0, 3},
        {2, 0, 0, 0, 3, 0, 0, 0, 0},
    };
    init(initial);
    result = solve(0,0);
    getResult(actual);
    if(memcmp(actual, expected, sizeof(initial)) == 0){
        INFO("Solution helper: if your Sudoku Solver gets 'stuck' in the first row, consider using the remove function at some point in your algorithm.");
        REQUIRE(memcmp(actual, expected, sizeof(initial)) != 0);
    }
    INFO("Test Case: solve hasn't found a solution yet.");
    REQUIRE(result==1);
}


TEST_CASE("Test2", "Sudoku")
{
    int result = 0;
    int actual[SIZE][SIZE];
    int initial[SIZE][SIZE] = {
        {0, 1, 0, 0, 0, 9, 0, 5, 0},
        {0, 9, 0, 0, 0, 0, 4, 8, 0},
        {0, 6, 0, 1, 0, 4, 0, 0, 0},
        {0, 0, 5, 0, 0, 0, 9, 3, 0},
        {0, 0, 0, 7, 0, 2, 0, 0, 0},
        {0, 2, 1, 0, 0, 0, 8, 0, 0},
        {4, 0, 0, 0, 8, 0, 6, 0, 9},
        {0, 0, 0, 0, 6, 0, 5, 0, 3},
        {2, 0, 0, 0, 3, 0, 0, 0, 0},
    };
    int expected[SIZE][SIZE] = {
        {3, 1, 4, 8, 7, 9, 2, 5, 6},
        {5, 9, 7, 3, 2, 6, 4, 8, 1},
        {8, 6, 2, 1, 5, 4, 3, 9, 7},
        {7, 4, 5, 6, 1, 8, 9, 3, 2},
        {9, 3, 8, 7, 4, 2, 1, 6, 5},
        {6, 2, 1, 5, 9, 3, 8, 7, 4},
        {4, 7, 3, 2, 8, 5, 6, 1, 9},
        {1, 8, 9, 4, 6, 7, 5, 2, 3},
        {2, 5, 6, 9, 3, 1, 7, 4, 8},
    };
    init(initial);
    result = solve(0,0);
    getResult(actual);
    INFO("Test Case: valid Sudoku board failed.");
    REQUIRE(memcmp(actual, expected, sizeof(initial)) == 0);
    INFO("Test Case: return value not correct.");
    REQUIRE(result == 1);
}


TEST_CASE("Test3", "Sudoku")
{
    int result = 0;
    int actual[SIZE][SIZE];
    int initial[SIZE][SIZE] = {
        {0, 1, 0, 0, 0, 9, 0, 5, 0},
        {0, 9, 0, 0, 0, 0, 4, 8, 0},
        {0, 6, 0, 1, 0, 4, 0, 0, 0},
        {0, 0, 5, 0, 0, 0, 9, 3, 0},
        {0, 0, 0, 7, 0, 2, 0, 0, 0},
        {0, 2, 1, 0, 0, 0, 8, 0, 0},
        {4, 0, 0, 0, 8, 6, 6, 0, 9},
        {0, 0, 0, 0, 6, 0, 5, 0, 3},
        {2, 0, 0, 0, 3, 0, 0, 0, 0},
    };
    int expected[SIZE][SIZE] = {
        {0, 1, 0, 0, 0, 9, 0, 5, 0},
        {0, 9, 0, 0, 0, 0, 4, 8, 0},
        {0, 6, 0, 1, 0, 4, 0, 0, 0},
        {0, 0, 5, 0, 0, 0, 9, 3, 0},
        {0, 0, 0, 7, 0, 2, 0, 0, 0},
        {0, 2, 1, 0, 0, 0, 8, 0, 0},
        {4, 0, 0, 0, 8, 6, 6, 0, 9},
        {0, 0, 0, 0, 6, 0, 5, 0, 3},
        {2, 0, 0, 0, 3, 0, 0, 0, 0},
    };
    init(initial);
    result = solve(0,0);
    getResult(actual);
    INFO("Test Case: invalid Sudoku board failed.");
    REQUIRE(memcmp(actual, expected, sizeof(initial)) == 0);
    INFO("Test Case: return value not correct.");
    REQUIRE(result == 0);
}
